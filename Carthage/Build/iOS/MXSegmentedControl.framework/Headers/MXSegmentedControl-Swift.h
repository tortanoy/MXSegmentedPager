#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.1 effective-4.2 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MXSegmentedControl",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;

SWIFT_CLASS("_TtC18MXSegmentedControl11MXIndicator")
@interface MXIndicator : UIView
/// The indicator insets
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/// The indicator line view.
@property (nonatomic, readonly, strong) UIView * _Nonnull lineView;
/// The indicator box view.
@property (nonatomic, readonly, strong) UIView * _Nonnull boxView;
/// The line height value.
@property (nonatomic) CGFloat lineHeight;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
@end

@class UIColor;
@class UIImage;
@class NSAttributedString;

/// A segment button embed in MXSegmentedControl
SWIFT_CLASS("_TtC18MXSegmentedControl9MXSegment")
@interface MXSegment : UIButton
/// Padding between segment title and image
@property (nonatomic) CGFloat padding;
/// The segment width
@property (nonatomic) CGFloat width;
- (MXSegment * _Nonnull)setWithWidth:(CGFloat)width;
- (MXSegment * _Nonnull)setWithPadding:(CGFloat)padding;
- (MXSegment * _Nonnull)setWithTitle:(NSString * _Nullable)title for:(UIControlState)state;
- (MXSegment * _Nonnull)setWithTitleColor:(UIColor * _Nullable)titleColor for:(UIControlState)state;
- (MXSegment * _Nonnull)setWithImage:(UIImage * _Nullable)image for:(UIControlState)state;
- (MXSegment * _Nonnull)setWithBackground:(UIImage * _Nullable)image for:(UIControlState)state;
- (MXSegment * _Nonnull)setWithAttributedTitle:(NSAttributedString * _Nullable)attributedTitle for:(UIControlState)state;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface MXSegment (SWIFT_EXTENSION(MXSegmentedControl))
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end

@class UIFont;
@class UIScrollView;

/// A MXSegmentedControl object is a horizontal control made of multiple segments, each segment functioning as a button. An indicator shows the current position of the selected segment.
/// A segmented control can display a title (an NSString object), an attributed title (NSAttributedString object) and/or an image (UIImage object).
/// The MXSegmentedControl object automatically resizes segments to fit proportionally within their superview unless they have a specific width set.
/// You can connect a UIScrollView using the <code>scrollView</code> property to make the indicator move with the scroll view’s contentOffset.
/// You register the target-action methods for a segmented control using the value​Changed constant as shown below.
/// \code
/// segmentedControl.addTarget(self, action: "action:", forControlEvents: .ValueChanged)
///
/// \endcode
SWIFT_CLASS("_TtC18MXSegmentedControl18MXSegmentedControl")
@interface MXSegmentedControl : UIControl
/// A Boolean value that controls whether the segmented control bounces past the edge of content and back again.
/// If the value of this property is true, the segmented control bounces when it encounters a boundary of the content. Bouncing visually indicates that control has reached an edge of the content. If the value is false, scrolling stops immediately at the content boundary without bouncing. The default value is true.
@property (nonatomic) BOOL bounces;
/// The font of the segments.
/// If you are using styled text in iOS 6 or later, assigning a new value to this property causes the font to be applied to the entirety of the string in the attributedText property. If you want to apply the font to only a portion of the text, create a new attributed string with the desired style information and associate it with the segment. If you are not using styled text, this property applies to the entire segments string in the title property.
/// The default value for this property is the system font at a size of 17 points (using the systemFont(ofSize:) class method of UIFont).
@property (nonatomic, strong) UIFont * _Nonnull font;
/// Sets the color of the segments title to use for the normal state.
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// Sets the color of the segments title to use for the selected state.
@property (nonatomic, strong) UIColor * _Nullable selectedTextColor;
/// Sets the width of the segments.
@property (nonatomic) CGFloat segmentWidth;
/// The segmented control content insets
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/// The inset or outset margins for the rectangle surrounding all of the segments’ content.
/// Use this property to resize and reposition the effective drawing rectangle for the segments content. The content comprises the segment image and segment title. You can specify a different value for each of the four insets (top, left, bottom, right). A positive value shrinks, or insets, that edge—moving it closer to the center of the segment. A negative value expands, or outsets, that edge. Use the UIEdgeInsets(top:left:bottom:right:) function to construct a value for this property. The default value is UIEdgeInsetsZero.
/// The segments uses this property to determine intrinsicContentSize and sizeThatFits(_:).
@property (nonatomic) UIEdgeInsets segmentEdgeInsets;
/// The segmented control’s indicator.
@property (nonatomic, readonly, strong) MXIndicator * _Nonnull indicator;
/// The indicator progress.
@property (nonatomic) CGFloat progress;
/// The currently selected segment index.
@property (nonatomic, readonly) NSInteger selectedIndex;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated segmented control object with the specified titles.
/// \param titles The segments titles.
///
- (nonnull instancetype)initWithTitles:(NSArray<NSString *> * _Nonnull)titles;
/// Initializes and returns a newly allocated segmented control object with the specified titles.
/// \param titles The segments titles.
///
- (nonnull instancetype)initWithAttributedTitles:(NSArray<NSAttributedString *> * _Nonnull)titles;
/// Initializes and returns a newly allocated segmented control object with the specified images.
/// \param images The segments images.
///
- (nonnull instancetype)initWithImages:(NSArray<UIImage *> * _Nonnull)images;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (void)prepareForInterfaceBuilder;
/// A scroll view to observe in order to move the indicator.
@property (nonatomic, weak) IBOutlet UIScrollView * _Nullable scrollView;
/// :nodoc:
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end








@interface MXSegmentedControl (SWIFT_EXTENSION(MXSegmentedControl))
/// Gets the segment at the given index.
/// \param index The segment index.
///
///
/// returns:
/// The segment at the index. nil if the index is out of range.
- (MXSegment * _Nullable)segmentAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Counts of segment.
@property (nonatomic, readonly) NSInteger count;
- (MXSegment * _Nonnull)newSegment SWIFT_WARN_UNUSED_RESULT;
/// Removes the segment the given index.
/// \param index The segment index to remove.
///
- (void)removeWithSegmentAt:(NSInteger)index;
/// Removes all segments.
- (void)removeAll;
/// Creates and append a new segment with the given title.
/// \param title The new segment title.
///
- (MXSegment * _Nonnull)appendWithTitle:(NSString * _Nonnull)title;
/// Creates and append a new segment with the given title.
/// \param title The new segment title.
///
- (MXSegment * _Nonnull)appendWithAttributedTitle:(NSAttributedString * _Nonnull)attributedTitle;
/// Creates and append a new segment with the given image.
/// \param title The new segment image.
///
- (MXSegment * _Nonnull)appendWithImage:(UIImage * _Nullable)image;
/// Selects the segment at the given index.
/// \param index The segment index to be selected.
///
/// \param animated true if the selection should be animated, false if it should be immediate.
///
- (void)selectWithIndex:(NSInteger)index animated:(BOOL)animated;
@end


@interface MXSegmentedControl (SWIFT_EXTENSION(MXSegmentedControl))
@property (nonatomic) CGFloat cornerRadius;
@property (nonatomic) CGFloat borderWidth;
@property (nonatomic, strong) UIColor * _Nullable borderColor;
@property (nonatomic) CGFloat separatorTop;
@property (nonatomic) CGFloat separatorBottom;
@property (nonatomic) CGFloat separatorWidth;
@property (nonatomic, strong) UIColor * _Nonnull separatorColor;
@property (nonatomic) CGFloat indicatorLeft;
@property (nonatomic) CGFloat indicatorRight;
@property (nonatomic) CGFloat indicatorHeight;
@property (nonatomic, strong) UIColor * _Nullable indicatorColor;
@property (nonatomic, strong) UIColor * _Nullable boxColor;
@property (nonatomic) CGFloat boxOpacity;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.1 effective-4.2 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MXSegmentedControl",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;

SWIFT_CLASS("_TtC18MXSegmentedControl11MXIndicator")
@interface MXIndicator : UIView
/// The indicator insets
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/// The indicator line view.
@property (nonatomic, readonly, strong) UIView * _Nonnull lineView;
/// The indicator box view.
@property (nonatomic, readonly, strong) UIView * _Nonnull boxView;
/// The line height value.
@property (nonatomic) CGFloat lineHeight;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
@end

@class UIColor;
@class UIImage;
@class NSAttributedString;

/// A segment button embed in MXSegmentedControl
SWIFT_CLASS("_TtC18MXSegmentedControl9MXSegment")
@interface MXSegment : UIButton
/// Padding between segment title and image
@property (nonatomic) CGFloat padding;
/// The segment width
@property (nonatomic) CGFloat width;
- (MXSegment * _Nonnull)setWithWidth:(CGFloat)width;
- (MXSegment * _Nonnull)setWithPadding:(CGFloat)padding;
- (MXSegment * _Nonnull)setWithTitle:(NSString * _Nullable)title for:(UIControlState)state;
- (MXSegment * _Nonnull)setWithTitleColor:(UIColor * _Nullable)titleColor for:(UIControlState)state;
- (MXSegment * _Nonnull)setWithImage:(UIImage * _Nullable)image for:(UIControlState)state;
- (MXSegment * _Nonnull)setWithBackground:(UIImage * _Nullable)image for:(UIControlState)state;
- (MXSegment * _Nonnull)setWithAttributedTitle:(NSAttributedString * _Nullable)attributedTitle for:(UIControlState)state;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface MXSegment (SWIFT_EXTENSION(MXSegmentedControl))
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end

@class UIFont;
@class UIScrollView;

/// A MXSegmentedControl object is a horizontal control made of multiple segments, each segment functioning as a button. An indicator shows the current position of the selected segment.
/// A segmented control can display a title (an NSString object), an attributed title (NSAttributedString object) and/or an image (UIImage object).
/// The MXSegmentedControl object automatically resizes segments to fit proportionally within their superview unless they have a specific width set.
/// You can connect a UIScrollView using the <code>scrollView</code> property to make the indicator move with the scroll view’s contentOffset.
/// You register the target-action methods for a segmented control using the value​Changed constant as shown below.
/// \code
/// segmentedControl.addTarget(self, action: "action:", forControlEvents: .ValueChanged)
///
/// \endcode
SWIFT_CLASS("_TtC18MXSegmentedControl18MXSegmentedControl")
@interface MXSegmentedControl : UIControl
/// A Boolean value that controls whether the segmented control bounces past the edge of content and back again.
/// If the value of this property is true, the segmented control bounces when it encounters a boundary of the content. Bouncing visually indicates that control has reached an edge of the content. If the value is false, scrolling stops immediately at the content boundary without bouncing. The default value is true.
@property (nonatomic) BOOL bounces;
/// The font of the segments.
/// If you are using styled text in iOS 6 or later, assigning a new value to this property causes the font to be applied to the entirety of the string in the attributedText property. If you want to apply the font to only a portion of the text, create a new attributed string with the desired style information and associate it with the segment. If you are not using styled text, this property applies to the entire segments string in the title property.
/// The default value for this property is the system font at a size of 17 points (using the systemFont(ofSize:) class method of UIFont).
@property (nonatomic, strong) UIFont * _Nonnull font;
/// Sets the color of the segments title to use for the normal state.
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// Sets the color of the segments title to use for the selected state.
@property (nonatomic, strong) UIColor * _Nullable selectedTextColor;
/// Sets the width of the segments.
@property (nonatomic) CGFloat segmentWidth;
/// The segmented control content insets
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/// The inset or outset margins for the rectangle surrounding all of the segments’ content.
/// Use this property to resize and reposition the effective drawing rectangle for the segments content. The content comprises the segment image and segment title. You can specify a different value for each of the four insets (top, left, bottom, right). A positive value shrinks, or insets, that edge—moving it closer to the center of the segment. A negative value expands, or outsets, that edge. Use the UIEdgeInsets(top:left:bottom:right:) function to construct a value for this property. The default value is UIEdgeInsetsZero.
/// The segments uses this property to determine intrinsicContentSize and sizeThatFits(_:).
@property (nonatomic) UIEdgeInsets segmentEdgeInsets;
/// The segmented control’s indicator.
@property (nonatomic, readonly, strong) MXIndicator * _Nonnull indicator;
/// The indicator progress.
@property (nonatomic) CGFloat progress;
/// The currently selected segment index.
@property (nonatomic, readonly) NSInteger selectedIndex;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated segmented control object with the specified titles.
/// \param titles The segments titles.
///
- (nonnull instancetype)initWithTitles:(NSArray<NSString *> * _Nonnull)titles;
/// Initializes and returns a newly allocated segmented control object with the specified titles.
/// \param titles The segments titles.
///
- (nonnull instancetype)initWithAttributedTitles:(NSArray<NSAttributedString *> * _Nonnull)titles;
/// Initializes and returns a newly allocated segmented control object with the specified images.
/// \param images The segments images.
///
- (nonnull instancetype)initWithImages:(NSArray<UIImage *> * _Nonnull)images;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (void)prepareForInterfaceBuilder;
/// A scroll view to observe in order to move the indicator.
@property (nonatomic, weak) IBOutlet UIScrollView * _Nullable scrollView;
/// :nodoc:
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end








@interface MXSegmentedControl (SWIFT_EXTENSION(MXSegmentedControl))
/// Gets the segment at the given index.
/// \param index The segment index.
///
///
/// returns:
/// The segment at the index. nil if the index is out of range.
- (MXSegment * _Nullable)segmentAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Counts of segment.
@property (nonatomic, readonly) NSInteger count;
- (MXSegment * _Nonnull)newSegment SWIFT_WARN_UNUSED_RESULT;
/// Removes the segment the given index.
/// \param index The segment index to remove.
///
- (void)removeWithSegmentAt:(NSInteger)index;
/// Removes all segments.
- (void)removeAll;
/// Creates and append a new segment with the given title.
/// \param title The new segment title.
///
- (MXSegment * _Nonnull)appendWithTitle:(NSString * _Nonnull)title;
/// Creates and append a new segment with the given title.
/// \param title The new segment title.
///
- (MXSegment * _Nonnull)appendWithAttributedTitle:(NSAttributedString * _Nonnull)attributedTitle;
/// Creates and append a new segment with the given image.
/// \param title The new segment image.
///
- (MXSegment * _Nonnull)appendWithImage:(UIImage * _Nullable)image;
/// Selects the segment at the given index.
/// \param index The segment index to be selected.
///
/// \param animated true if the selection should be animated, false if it should be immediate.
///
- (void)selectWithIndex:(NSInteger)index animated:(BOOL)animated;
@end


@interface MXSegmentedControl (SWIFT_EXTENSION(MXSegmentedControl))
@property (nonatomic) CGFloat cornerRadius;
@property (nonatomic) CGFloat borderWidth;
@property (nonatomic, strong) UIColor * _Nullable borderColor;
@property (nonatomic) CGFloat separatorTop;
@property (nonatomic) CGFloat separatorBottom;
@property (nonatomic) CGFloat separatorWidth;
@property (nonatomic, strong) UIColor * _Nonnull separatorColor;
@property (nonatomic) CGFloat indicatorLeft;
@property (nonatomic) CGFloat indicatorRight;
@property (nonatomic) CGFloat indicatorHeight;
@property (nonatomic, strong) UIColor * _Nullable indicatorColor;
@property (nonatomic, strong) UIColor * _Nullable boxColor;
@property (nonatomic) CGFloat boxOpacity;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1 effective-4.2 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MXSegmentedControl",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;

SWIFT_CLASS("_TtC18MXSegmentedControl11MXIndicator")
@interface MXIndicator : UIView
/// The indicator insets
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/// The indicator line view.
@property (nonatomic, readonly, strong) UIView * _Nonnull lineView;
/// The indicator box view.
@property (nonatomic, readonly, strong) UIView * _Nonnull boxView;
/// The line height value.
@property (nonatomic) CGFloat lineHeight;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
@end

@class UIColor;
@class UIImage;
@class NSAttributedString;

/// A segment button embed in MXSegmentedControl
SWIFT_CLASS("_TtC18MXSegmentedControl9MXSegment")
@interface MXSegment : UIButton
/// Padding between segment title and image
@property (nonatomic) CGFloat padding;
/// The segment width
@property (nonatomic) CGFloat width;
- (MXSegment * _Nonnull)setWithWidth:(CGFloat)width;
- (MXSegment * _Nonnull)setWithPadding:(CGFloat)padding;
- (MXSegment * _Nonnull)setWithTitle:(NSString * _Nullable)title for:(UIControlState)state;
- (MXSegment * _Nonnull)setWithTitleColor:(UIColor * _Nullable)titleColor for:(UIControlState)state;
- (MXSegment * _Nonnull)setWithImage:(UIImage * _Nullable)image for:(UIControlState)state;
- (MXSegment * _Nonnull)setWithBackground:(UIImage * _Nullable)image for:(UIControlState)state;
- (MXSegment * _Nonnull)setWithAttributedTitle:(NSAttributedString * _Nullable)attributedTitle for:(UIControlState)state;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface MXSegment (SWIFT_EXTENSION(MXSegmentedControl))
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end

@class UIFont;
@class UIScrollView;

/// A MXSegmentedControl object is a horizontal control made of multiple segments, each segment functioning as a button. An indicator shows the current position of the selected segment.
/// A segmented control can display a title (an NSString object), an attributed title (NSAttributedString object) and/or an image (UIImage object).
/// The MXSegmentedControl object automatically resizes segments to fit proportionally within their superview unless they have a specific width set.
/// You can connect a UIScrollView using the <code>scrollView</code> property to make the indicator move with the scroll view’s contentOffset.
/// You register the target-action methods for a segmented control using the value​Changed constant as shown below.
/// \code
/// segmentedControl.addTarget(self, action: "action:", forControlEvents: .ValueChanged)
///
/// \endcode
SWIFT_CLASS("_TtC18MXSegmentedControl18MXSegmentedControl")
@interface MXSegmentedControl : UIControl
/// A Boolean value that controls whether the segmented control bounces past the edge of content and back again.
/// If the value of this property is true, the segmented control bounces when it encounters a boundary of the content. Bouncing visually indicates that control has reached an edge of the content. If the value is false, scrolling stops immediately at the content boundary without bouncing. The default value is true.
@property (nonatomic) BOOL bounces;
/// The font of the segments.
/// If you are using styled text in iOS 6 or later, assigning a new value to this property causes the font to be applied to the entirety of the string in the attributedText property. If you want to apply the font to only a portion of the text, create a new attributed string with the desired style information and associate it with the segment. If you are not using styled text, this property applies to the entire segments string in the title property.
/// The default value for this property is the system font at a size of 17 points (using the systemFont(ofSize:) class method of UIFont).
@property (nonatomic, strong) UIFont * _Nonnull font;
/// Sets the color of the segments title to use for the normal state.
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// Sets the color of the segments title to use for the selected state.
@property (nonatomic, strong) UIColor * _Nullable selectedTextColor;
/// Sets the width of the segments.
@property (nonatomic) CGFloat segmentWidth;
/// The segmented control content insets
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/// The inset or outset margins for the rectangle surrounding all of the segments’ content.
/// Use this property to resize and reposition the effective drawing rectangle for the segments content. The content comprises the segment image and segment title. You can specify a different value for each of the four insets (top, left, bottom, right). A positive value shrinks, or insets, that edge—moving it closer to the center of the segment. A negative value expands, or outsets, that edge. Use the UIEdgeInsets(top:left:bottom:right:) function to construct a value for this property. The default value is UIEdgeInsetsZero.
/// The segments uses this property to determine intrinsicContentSize and sizeThatFits(_:).
@property (nonatomic) UIEdgeInsets segmentEdgeInsets;
/// The segmented control’s indicator.
@property (nonatomic, readonly, strong) MXIndicator * _Nonnull indicator;
/// The indicator progress.
@property (nonatomic) CGFloat progress;
/// The currently selected segment index.
@property (nonatomic, readonly) NSInteger selectedIndex;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated segmented control object with the specified titles.
/// \param titles The segments titles.
///
- (nonnull instancetype)initWithTitles:(NSArray<NSString *> * _Nonnull)titles;
/// Initializes and returns a newly allocated segmented control object with the specified titles.
/// \param titles The segments titles.
///
- (nonnull instancetype)initWithAttributedTitles:(NSArray<NSAttributedString *> * _Nonnull)titles;
/// Initializes and returns a newly allocated segmented control object with the specified images.
/// \param images The segments images.
///
- (nonnull instancetype)initWithImages:(NSArray<UIImage *> * _Nonnull)images;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (void)prepareForInterfaceBuilder;
/// A scroll view to observe in order to move the indicator.
@property (nonatomic, weak) IBOutlet UIScrollView * _Nullable scrollView;
/// :nodoc:
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end








@interface MXSegmentedControl (SWIFT_EXTENSION(MXSegmentedControl))
/// Gets the segment at the given index.
/// \param index The segment index.
///
///
/// returns:
/// The segment at the index. nil if the index is out of range.
- (MXSegment * _Nullable)segmentAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Counts of segment.
@property (nonatomic, readonly) NSInteger count;
- (MXSegment * _Nonnull)newSegment SWIFT_WARN_UNUSED_RESULT;
/// Removes the segment the given index.
/// \param index The segment index to remove.
///
- (void)removeWithSegmentAt:(NSInteger)index;
/// Removes all segments.
- (void)removeAll;
/// Creates and append a new segment with the given title.
/// \param title The new segment title.
///
- (MXSegment * _Nonnull)appendWithTitle:(NSString * _Nonnull)title;
/// Creates and append a new segment with the given title.
/// \param title The new segment title.
///
- (MXSegment * _Nonnull)appendWithAttributedTitle:(NSAttributedString * _Nonnull)attributedTitle;
/// Creates and append a new segment with the given image.
/// \param title The new segment image.
///
- (MXSegment * _Nonnull)appendWithImage:(UIImage * _Nullable)image;
/// Selects the segment at the given index.
/// \param index The segment index to be selected.
///
/// \param animated true if the selection should be animated, false if it should be immediate.
///
- (void)selectWithIndex:(NSInteger)index animated:(BOOL)animated;
@end


@interface MXSegmentedControl (SWIFT_EXTENSION(MXSegmentedControl))
@property (nonatomic) CGFloat cornerRadius;
@property (nonatomic) CGFloat borderWidth;
@property (nonatomic, strong) UIColor * _Nullable borderColor;
@property (nonatomic) CGFloat separatorTop;
@property (nonatomic) CGFloat separatorBottom;
@property (nonatomic) CGFloat separatorWidth;
@property (nonatomic, strong) UIColor * _Nonnull separatorColor;
@property (nonatomic) CGFloat indicatorLeft;
@property (nonatomic) CGFloat indicatorRight;
@property (nonatomic) CGFloat indicatorHeight;
@property (nonatomic, strong) UIColor * _Nullable indicatorColor;
@property (nonatomic, strong) UIColor * _Nullable boxColor;
@property (nonatomic) CGFloat boxOpacity;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1 effective-4.2 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MXSegmentedControl",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;

SWIFT_CLASS("_TtC18MXSegmentedControl11MXIndicator")
@interface MXIndicator : UIView
/// The indicator insets
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/// The indicator line view.
@property (nonatomic, readonly, strong) UIView * _Nonnull lineView;
/// The indicator box view.
@property (nonatomic, readonly, strong) UIView * _Nonnull boxView;
/// The line height value.
@property (nonatomic) CGFloat lineHeight;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
@end

@class UIColor;
@class UIImage;
@class NSAttributedString;

/// A segment button embed in MXSegmentedControl
SWIFT_CLASS("_TtC18MXSegmentedControl9MXSegment")
@interface MXSegment : UIButton
/// Padding between segment title and image
@property (nonatomic) CGFloat padding;
/// The segment width
@property (nonatomic) CGFloat width;
- (MXSegment * _Nonnull)setWithWidth:(CGFloat)width;
- (MXSegment * _Nonnull)setWithPadding:(CGFloat)padding;
- (MXSegment * _Nonnull)setWithTitle:(NSString * _Nullable)title for:(UIControlState)state;
- (MXSegment * _Nonnull)setWithTitleColor:(UIColor * _Nullable)titleColor for:(UIControlState)state;
- (MXSegment * _Nonnull)setWithImage:(UIImage * _Nullable)image for:(UIControlState)state;
- (MXSegment * _Nonnull)setWithBackground:(UIImage * _Nullable)image for:(UIControlState)state;
- (MXSegment * _Nonnull)setWithAttributedTitle:(NSAttributedString * _Nullable)attributedTitle for:(UIControlState)state;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface MXSegment (SWIFT_EXTENSION(MXSegmentedControl))
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end

@class UIFont;
@class UIScrollView;

/// A MXSegmentedControl object is a horizontal control made of multiple segments, each segment functioning as a button. An indicator shows the current position of the selected segment.
/// A segmented control can display a title (an NSString object), an attributed title (NSAttributedString object) and/or an image (UIImage object).
/// The MXSegmentedControl object automatically resizes segments to fit proportionally within their superview unless they have a specific width set.
/// You can connect a UIScrollView using the <code>scrollView</code> property to make the indicator move with the scroll view’s contentOffset.
/// You register the target-action methods for a segmented control using the value​Changed constant as shown below.
/// \code
/// segmentedControl.addTarget(self, action: "action:", forControlEvents: .ValueChanged)
///
/// \endcode
SWIFT_CLASS("_TtC18MXSegmentedControl18MXSegmentedControl")
@interface MXSegmentedControl : UIControl
/// A Boolean value that controls whether the segmented control bounces past the edge of content and back again.
/// If the value of this property is true, the segmented control bounces when it encounters a boundary of the content. Bouncing visually indicates that control has reached an edge of the content. If the value is false, scrolling stops immediately at the content boundary without bouncing. The default value is true.
@property (nonatomic) BOOL bounces;
/// The font of the segments.
/// If you are using styled text in iOS 6 or later, assigning a new value to this property causes the font to be applied to the entirety of the string in the attributedText property. If you want to apply the font to only a portion of the text, create a new attributed string with the desired style information and associate it with the segment. If you are not using styled text, this property applies to the entire segments string in the title property.
/// The default value for this property is the system font at a size of 17 points (using the systemFont(ofSize:) class method of UIFont).
@property (nonatomic, strong) UIFont * _Nonnull font;
/// Sets the color of the segments title to use for the normal state.
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// Sets the color of the segments title to use for the selected state.
@property (nonatomic, strong) UIColor * _Nullable selectedTextColor;
/// Sets the width of the segments.
@property (nonatomic) CGFloat segmentWidth;
/// The segmented control content insets
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/// The inset or outset margins for the rectangle surrounding all of the segments’ content.
/// Use this property to resize and reposition the effective drawing rectangle for the segments content. The content comprises the segment image and segment title. You can specify a different value for each of the four insets (top, left, bottom, right). A positive value shrinks, or insets, that edge—moving it closer to the center of the segment. A negative value expands, or outsets, that edge. Use the UIEdgeInsets(top:left:bottom:right:) function to construct a value for this property. The default value is UIEdgeInsetsZero.
/// The segments uses this property to determine intrinsicContentSize and sizeThatFits(_:).
@property (nonatomic) UIEdgeInsets segmentEdgeInsets;
/// The segmented control’s indicator.
@property (nonatomic, readonly, strong) MXIndicator * _Nonnull indicator;
/// The indicator progress.
@property (nonatomic) CGFloat progress;
/// The currently selected segment index.
@property (nonatomic, readonly) NSInteger selectedIndex;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated segmented control object with the specified titles.
/// \param titles The segments titles.
///
- (nonnull instancetype)initWithTitles:(NSArray<NSString *> * _Nonnull)titles;
/// Initializes and returns a newly allocated segmented control object with the specified titles.
/// \param titles The segments titles.
///
- (nonnull instancetype)initWithAttributedTitles:(NSArray<NSAttributedString *> * _Nonnull)titles;
/// Initializes and returns a newly allocated segmented control object with the specified images.
/// \param images The segments images.
///
- (nonnull instancetype)initWithImages:(NSArray<UIImage *> * _Nonnull)images;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (void)prepareForInterfaceBuilder;
/// A scroll view to observe in order to move the indicator.
@property (nonatomic, weak) IBOutlet UIScrollView * _Nullable scrollView;
/// :nodoc:
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end








@interface MXSegmentedControl (SWIFT_EXTENSION(MXSegmentedControl))
/// Gets the segment at the given index.
/// \param index The segment index.
///
///
/// returns:
/// The segment at the index. nil if the index is out of range.
- (MXSegment * _Nullable)segmentAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Counts of segment.
@property (nonatomic, readonly) NSInteger count;
- (MXSegment * _Nonnull)newSegment SWIFT_WARN_UNUSED_RESULT;
/// Removes the segment the given index.
/// \param index The segment index to remove.
///
- (void)removeWithSegmentAt:(NSInteger)index;
/// Removes all segments.
- (void)removeAll;
/// Creates and append a new segment with the given title.
/// \param title The new segment title.
///
- (MXSegment * _Nonnull)appendWithTitle:(NSString * _Nonnull)title;
/// Creates and append a new segment with the given title.
/// \param title The new segment title.
///
- (MXSegment * _Nonnull)appendWithAttributedTitle:(NSAttributedString * _Nonnull)attributedTitle;
/// Creates and append a new segment with the given image.
/// \param title The new segment image.
///
- (MXSegment * _Nonnull)appendWithImage:(UIImage * _Nullable)image;
/// Selects the segment at the given index.
/// \param index The segment index to be selected.
///
/// \param animated true if the selection should be animated, false if it should be immediate.
///
- (void)selectWithIndex:(NSInteger)index animated:(BOOL)animated;
@end


@interface MXSegmentedControl (SWIFT_EXTENSION(MXSegmentedControl))
@property (nonatomic) CGFloat cornerRadius;
@property (nonatomic) CGFloat borderWidth;
@property (nonatomic, strong) UIColor * _Nullable borderColor;
@property (nonatomic) CGFloat separatorTop;
@property (nonatomic) CGFloat separatorBottom;
@property (nonatomic) CGFloat separatorWidth;
@property (nonatomic, strong) UIColor * _Nonnull separatorColor;
@property (nonatomic) CGFloat indicatorLeft;
@property (nonatomic) CGFloat indicatorRight;
@property (nonatomic) CGFloat indicatorHeight;
@property (nonatomic, strong) UIColor * _Nullable indicatorColor;
@property (nonatomic, strong) UIColor * _Nullable boxColor;
@property (nonatomic) CGFloat boxOpacity;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#endif
